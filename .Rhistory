cbind(lower,x)
sort(cbind(lower,x),by=x)
?sort
a
rank(a)
sort(a)
a[rank(a)]
a[order(a)]
cbind(lower[order(x)],sort(x))
supper<-cbind(upper[order(x)],sort(x))
slower<-cbind(lower[order(x)],sort(x))
points(x,slower,type='l')
points(x,supper,type='l')
slower
points(x,slower[,1],type='l')
points(x,supper[,1],type='l')
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
lower<-sort_Aprx_dist[1000*0.05,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]*sqrt(var(resi))+predYsvR
slower<-cbind(lower[order(x)],sort(x))
supper<-cbind(upper[order(x)],sort(x))
points(x,slower[,1])
points(x,supper[,1])
library("e1071")
set.seed(1234)
noise<-rnorm(200,1,0.1)
x<-runif(200,0,1)
y<-exp(-32*(x-0.5)^2)+noise
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.2,3.2))
modelsvR = svm(y~x)
predYsvR = predict(modelsvR, x)
points(x,predYsvR,col="red",pch=16)
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
lower<-sort_Aprx_dist[1000*0.05,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]*sqrt(var(resi))+predYsvR
slower<-cbind(lower[order(x)],sort(x))
supper<-cbind(upper[order(x)],sort(x))
points(x,slower[,1])
points(x,supper[,1])
lower[1]
upper[1]
sort_Aprx_dist
sort_Aprx_dist$V1
sort_Aprx_dist[,V1]
sort_Aprx_dist[,1]
lower<-sort_Aprx_dist[1000*0.05,]
upper<-sort_Aprx_dist[1000*0.95,]
sort_Aprx_dist[,1]
lower[1]
upper<-sort_Aprx_dist
lower[1]
upper[1]
sort_Aprx_dist[950,1]
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
lower<-sort_Aprx_dist[1000*0.05,]#*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]#*sqrt(var(resi))+predYsvR
lower[1]
upper[1]
Aprx_dist<-as.data.frame(matrix(rep(0,200*2000),2000,200))
dim(sort_Aprx_dist)
Aprx_dist
library("e1071")
set.seed(1234)
noise<-rnorm(200,1,0.1)
x<-runif(200,0,1)
y<-exp(-32*(x-0.5)^2)+noise
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.2,3.2))
modelsvR = svm(y~x)
predYsvR = predict(modelsvR, x)
points(x,predYsvR,col="red",pch=16)
#boostrap part
resi<-predYsvR-y
resi<-resi-mean(resi)
Aprx_dist<-as.data.frame(matrix(rep(0,200*1000),1000,200))
for(i in 1:1000){
new_resi<-sample(resi,200,replace = TRUE)
y_new<-predYsvR + new_resi
model_new = svm(y_new~x)
SVR_new<-predict(model_new, x)
Qi<-(predYsvR-SVR_new)/sqrt(var(new_resi))
Aprx_dist[i,]<-Qi
}
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
lower<-sort_Aprx_dist[1000*0.05,]#*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]#*sqrt(var(resi))+predYsvR
lower[1]
upper[1]
lower<-sort_Aprx_dist[1000*0.05,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]*sqrt(var(resi))+predYsvR
slower<-cbind(lower[order(x)],sort(x))
supper<-cbind(upper[order(x)],sort(x))
points(x,slower[,1])
points(x,supper[,1])
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.2,3.2))
points(x,predYsvR,col="red",pch=16)
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x,predYsvR,col="red",pch=16)
points(x,slower[,1])
lower[1]
y[1]
sort_Aprx_dist[50,1]
sort_Aprx_dist[50,1]**sqrt(var(resi))
sort_Aprx_dist[50,1]*sqrt(var(resi))
sort_Aprx_dist[50,1]*sqrt(var(resi))+predYsvR
sort_Aprx_dist[50,1]*sqrt(var(resi))+predYsvR[1]
y
y[1]
sort_Aprx_dist[50,1]*sqrt(var(resi))+predYsvR[1]
predYsvR[1]
plot(x[1],y[1],col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x[1],predYsvR[1],col="red",pch=16)
slower[,1]
,slower[,1]
slower[,1][1]
lower[1]
lower[order(x)]
lower[order(x)][1]
points(x[1],lower[order(x)][1])
points(x,upper[order(x)][1])
points(x[1],upper[order(x)][1])
upper[1]
order(x)
upper[73]
lower[73]
plot(x[1],y[1],col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x[1],predYsvR[1],col="red",pch=16)
plot(x[1],y[1],col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x[1],predYsvR[1],col="red",pch=16)
points(x[1],lower[1])
points(x[1],upper[1])
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x,predYsvR,col="red",pch=16)
points(x,lower)
points(x,upper)
points(x,lower,typ='l')
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x,predYsvR,col="red",pch=16)
points(x[order(x)],lower[order(x)],typ='l')
points(x[order(x)],upper[order(x)])
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(-0.5,2.5))
points(x,predYsvR,col="red",pch=16)
points(x[order(x)],lower[order(x)],typ='l')
points(x[order(x)],upper[order(x)],typ='l')
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(0.5,2.5))
points(x,predYsvR,col="red",pch=16)
points(x[order(x)],lower[order(x)],typ='l')
points(x[order(x)],upper[order(x)],typ='l')
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(0.5,2.5))
points(x,predYsvR,col="red",typ='n')
points(x,predYsvR,col="red",type='n')
?points
plot(x,y,col="blue",pch=16,xlim=range(0,1),ylim=range(0.5,2.5))
points(x,predYsvR,col="red",typ=20)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.5,2.5))
points(x,predYsvR,col="red",pch=20)
points(x[order(x)],lower[order(x)],typ='l')
points(x[order(x)],upper[order(x)],typ='l')
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
lower<-sort_Aprx_dist[1000*0.05,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*0.95,]*sqrt(var(resi))+predYsvR
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
points(x,predYsvR,col="red",pch=20)
points(x[order(x)],lower[order(x)],typ='l')
points(x[order(x)],upper[order(x)],typ='l')
?polygon
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
plot(c(1, 4), 1:2, type = "n")
polygon(1:9, c(2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
plot(c(1, 4), 1:2, type = "n")
polygon(1:4, c(2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
polygon((c(1:4,1:4) c(2,1,2,1,1,2,1,2),
density = c(10, 20), angle = c(-45, 45))
polygon((c(1:4,1:4),c(2,1,2,1,1,2,1,2),
density = c(10, 20), angle = c(-45, 45))
polygon(c(1:4,1:4), c(2,1,2,1,1,2,1,2),
density = c(10, 20), angle = c(-45, 45))
polygon(c(1:4,1:4), c(1,1,1,1,2,2,2,2),
density = c(10, 20), angle = c(-45, 45))
plot(c(1, 4), 1:2, type = "n")
polygon(c(1:4,1:4), c(1,1,1,1,2,2,2,2),
density = c(10, 20), angle = c(-45, 45))
plot(c(1, 4), 1:2, type = "n")
polygon(c(1:4,1:4), c(1,1,1,1,2,2,2,2),
col = 'grey80', border = NA)
df <- data.frame(x =1:10,
F =runif(10,1,2),
L =runif(10,0,1),
U =runif(10,2,3))
plot(df$x, df$F, ylim = c(0,4), type = "l")
#make polygon where coordinates start with lower limit and
# then upper limit in reverse order
polygon(c(df$x,rev(df$x)),c(df$L,rev(df$U)),col = "grey75", border = FALSE)
lines(df$x, df$F, lwd = 2)
#add red lines on borders of polygon
lines(df$x, df$U, col="red",lty=2)
lines(df$x, df$L, col="red",lty=2)
df
df$x
df$F
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
points(x,predYsvR,col="red",pch=20)
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col = "grey75", border = FALSE)
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col = "grey75", border = FALSE)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
points(x,predYsvR,col="red",pch=20)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col = "grey75", border = FALSE)
points(x,predYsvR,col="red",pch=20)
?polygon
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),lty="dashed",col = "grey75", border = FALSE)
points(x,predYsvR,col="red",pch=20)
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(1, 0, 0,0.5), border=NA)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)]))col=rgb(1, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(1, 0, 0,0.5), border=NA)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend(1, 95, legend=c("dot1", "dot1"),
col=c("blue","red"), lty=1:2, cex=0.8)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend(1, 95, legend=c("dot1", "dot1"),
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend(1, 95, legend=c("dot1", "dot1"),
col=c("blue","red"), lty=1:2, cex=0.8)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(16,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
?rgb
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,0),
rgb(1,0,0,0)),
pch = c(16,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3))
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
multiplier<-sample(c(-1,1),replace=TRUE)
multiplier
multiplier<-sample(c(-1,1),200,replace=TRUE)
multiplier
new_resi<-resi*multiplier
library("e1071")
set.seed(1234)
noise<-rnorm(200,1,0.1)
x<-runif(200,0,1)
y<-exp(-32*(x-0.5)^2)+noise
modelsvR = svm(y~x)
predYsvR = predict(modelsvR, x)
#boostrap part
resi<-predYsvR-y
resi<-resi-mean(resi)
Aprx_dist<-as.data.frame(matrix(rep(0,200*1000),1000,200))
###heteroscedasticity
for(i in 1:1000){
multiplier<-sample(c(-1,1),200,replace=TRUE)
new_resi<-resi*multiplier
y_new<-predYsvR + new_resi
model_new = svm(y_new~x)
SVR_new<-predict(model_new, x)
Qi<-(predYsvR-SVR_new)/sqrt(var(new_resi))
Aprx_dist[i,]<-Qi
}
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
alpha <-0.05 #assume significant level to be 0.05
lower<-sort_Aprx_dist[1000*alpha,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*(1-alpha),]*sqrt(var(resi))+predYsvR
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
library("e1071");set.seed(1234)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05 (heteroscedasticitycase)")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05
(heteroscedasticitycase)")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
library("e1071");set.seed(1234)
noise<-rnorm(200,1,0.1)
x<-runif(200,0,1)
y<-exp(-32*(x-0.5)^2)+noise
modelsvR = svm(y~x)
predYsvR = predict(modelsvR, x)
#boostrap part
resi<-predYsvR-y
resi<-resi-mean(resi)
Aprx_dist<-as.data.frame(matrix(rep(0,200*1000),1000,200))
#homoscedasticity
for(i in 1:1000){
new_resi<-sample(resi,200,replace = TRUE)
y_new<-predYsvR + new_resi
model_new = svm(y_new~x)
SVR_new<-predict(model_new, x)
Qi<-(predYsvR-SVR_new)/sqrt(var(new_resi))
Aprx_dist[i,]<-Qi
}
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
alpha <-0.05 #assume significant level to be 0.05
lower<-sort_Aprx_dist[1000*alpha,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*(1-alpha),]*sqrt(var(resi))+predYsvR
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05
(homoscedasticity)")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
library("e1071");set.seed(1234)
noise<-rnorm(200,1,0.1)
x<-runif(200,0,1)
y<-exp(-32*(x-0.5)^2)+noise
modelsvR = svm(y~x)
predYsvR = predict(modelsvR, x)
#boostrap part
resi<-predYsvR-y
resi<-resi-mean(resi)
Aprx_dist<-as.data.frame(matrix(rep(0,200*1000),1000,200))
#homoscedasticity
for(i in 1:1000){
new_resi<-sample(resi,200,replace = TRUE)
y_new<-predYsvR + new_resi
model_new = svm(y_new~x)
SVR_new<-predict(model_new, x)
Qi<-(predYsvR-SVR_new)/sqrt(var(new_resi))
Aprx_dist[i,]<-Qi
}
###heteroscedasticity
for(i in 1:1000){
multiplier<-sample(c(-1,1),200,replace=TRUE)
new_resi<-resi*multiplier
y_new<-predYsvR + new_resi
model_new = svm(y_new~x)
SVR_new<-predict(model_new, x)
Qi<-(predYsvR-SVR_new)/sqrt(var(new_resi))
Aprx_dist[i,]<-Qi
}
sort_Aprx_dist<-apply(Aprx_dist,2,sort)
alpha <-0.05 #assume significant level to be 0.05
lower<-sort_Aprx_dist[1000*alpha,]*sqrt(var(resi))+predYsvR
upper<-sort_Aprx_dist[1000*(1-alpha),]*sqrt(var(resi))+predYsvR
plot(x,y,col="blue",pch=20,xlim=range(0,1),ylim=range(0.7,2.3),main="SVR confidence interval with significant level =0.05
(homoscedasticity)")
polygon(c(x[order(x)],rev(x[order(x)])),c(lower[order(x)],rev(upper[order(x)])),col=rgb(0, 0, 0,0.5), border=NA)
points(x,predYsvR,col="red",pch=20)
legend("topright",
legend = c("true value", "predict value"),
col = c(rgb(0,0,1,1),
rgb(1,0,0,1)),
pch = c(16,16),
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F)
